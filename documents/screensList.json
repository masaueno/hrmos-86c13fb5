{
  "key": "screensList",
  "value": [
    {
      "component": "ログインフォーム（従業員ID/メールアドレス入力欄 パスワード入力欄） ログインボタン パスワードリセットリンク",
      "accessRight": "ゲスト",
      "fileName": "login.tsx",
      "operatingProcedure": "1. 従業員IDまたはメールアドレスを入力\n2. パスワードを入力\n3. ログインボタンをクリック\n4. 認証に成功するとホーム画面に遷移",
      "description": "ユーザーが勤怠管理システムにログインするための画面",
      "id": "SCR-001",
      "screenName": "ログイン画面",
      "category": "認証",
      "user": "全従業員",
      "relatedBackendHandles": [
        {
          "fileName": "auth.ts",
          "handleProcedure": "1. クライアントから受け取った認証情報を検証する\n2. データベースでユーザーを検索し パスワードを照合する\n3. 認証成功時にJWTトークンを生成する\n4. 生成したトークンをクライアントに返す",
          "relatedScreen": "SCR-001",
          "handleName": "ユーザー認証",
          "description": "従業員IDまたはメールアドレスとパスワードを使用してユーザーを認証し JWTトークンを発行する",
          "id": "BAC-001",
          "category": "認証",
          "relatedFrontendCode": "import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaUser, FaLock, FaEnvelope } from 'react-icons/fa';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\n\nconst Login = () => {\n  const [identifier, setIdentifier] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const router = useRouter();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setError('');\n\n    try {\n      const { data, error } = await supabase.auth.signInWithPassword({\n        email: identifier,\n        password: password,\n      });\n\n      if (error) throw error;\n\n      if (data.user) {\n        router.push('/home');\n      }\n    } catch (error: any) {\n      setError(error.message || 'ログインに失敗しました。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-md w-full space-y-8 bg-white p-10 rounded-xl shadow-md\">\n          <div>\n            <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n              勤怠管理システムにログイン\n            </h2>\n          </div>\n          <form className=\"mt-8 space-y-6\" onSubmit={handleLogin}>\n            <div className=\"rounded-md shadow-sm -space-y-px\">\n              <div>\n                <label htmlFor=\"identifier\" className=\"sr-only\">\n                  従業員IDまたはメールアドレス\n                </label>\n                <div className=\"flex items-center\">\n                  <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500\">\n                    <FaUser className=\"h-5 w-5\" />\n                  </span>\n                  <input\n                    id=\"identifier\"\n                    name=\"identifier\"\n                    type=\"text\"\n                    autoComplete=\"username\"\n                    required\n                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-r-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                    placeholder=\"従業員IDまたはメールアドレス\"\n                    value={identifier}\n                    onChange={(e) => setIdentifier(e.target.value)}\n                  />\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <label htmlFor=\"password\" className=\"sr-only\">\n                  パスワード\n                </label>\n                <div className=\"flex items-center\">\n                  <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-gray-500\">\n                    <FaLock className=\"h-5 w-5\" />\n                  </span>\n                  <input\n                    id=\"password\"\n                    name=\"password\"\n                    type=\"password\"\n                    autoComplete=\"current-password\"\n                    required\n                    className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-r-md focus:outline-none focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm\"\n                    placeholder=\"パスワード\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {error && (\n              <div className=\"text-red-500 text-sm text-center\">{error}</div>\n            )}\n\n            <div>\n              <button\n                type=\"submit\"\n                className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                ログイン\n              </button>\n            </div>\n          </form>\n\n          <div className=\"text-sm text-center\">\n            <Link href=\"/password-reset\" className=\"font-medium text-blue-600 hover:text-blue-500\">\n              パスワードを忘れた場合\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;"
        }
      ]
    },
    {
      "component": "ヘッダー（ユーザー情報 通知アイコン） サイドメニュー 勤怠状況サマリー 本日の予定 クイックアクセスボタン（打刻 休暇申請 シフト確認）",
      "accessRight": "ログインユーザー",
      "fileName": "index.tsx",
      "operatingProcedure": "1. 画面上部のサマリーで勤怠状況を確認\n2. サイドメニューから各機能にアクセス\n3. クイックアクセスボタンで主要機能を即座に利用",
      "description": "ログイン後のメインダッシュボード画面",
      "id": "SCR-002",
      "screenName": "ホーム画面",
      "category": "ダッシュボード",
      "user": "全従業員",
      "relatedBackendHandles": []
    },
    {
      "component": "現在時刻表示 打刻ボタン（出勤 退勤 休憩開始 休憩終了） 打刻方法選択（PCブラウザ スマホアプリ ICカード QRコード等） 勤務場所選択",
      "accessRight": "ログインユーザー",
      "fileName": "time-clock.tsx",
      "operatingProcedure": "1. 打刻方法を選択（初期設定がある場合は省略可）\n2. 勤務場所を選択（複数拠点がある場合）\n3. 適切な打刻ボタン（出勤 退勤 休憩開始 休憩終了）をクリック\n4. 打刻確認画面に遷移",
      "description": "従業員が勤怠を打刻するための画面",
      "id": "SCR-003",
      "screenName": "勤怠打刻画面",
      "category": "勤怠打刻",
      "user": "全従業員",
      "relatedBackendHandles": [
        {
          "fileName": "time-clock.ts",
          "handleProcedure": "1. クライアントから受け取った打刻情報を検証する\n2. 打刻情報をデータベースに登録する\n3. 登録成功時は成功メッセージを 失敗時はエラーメッセージをクライアントに返す",
          "relatedScreen": "SCR-003",
          "handleName": "勤怠記録の登録",
          "description": "従業員の勤怠打刻情報を受け取り データベースに登録する",
          "id": "BAC-002",
          "category": "勤怠打刻",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\nimport { FaClock, FaMapMarkerAlt, FaUserCheck, FaUserTimes, FaCoffee, FaUtensils } from 'react-icons/fa';\nimport { BiSelectMultiple } from 'react-icons/bi';\nimport { supabase } from '@/supabase';\n\nconst TimeClock: React.FC = () => {\n  const router = useRouter();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [recordMethod, setRecordMethod] = useState('PCブラウザ');\n  const [location, setLocation] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 1000);\n    return () => clearInterval(timer);\n  }, []);\n\n  const handleTimeRecord = async (recordType: string) => {\n    try {\n      const { data, error } = await supabase\n        .from('time_records')\n        .insert({\n          employee_id: 'サンプル従業員ID', // 実際の実装ではログインユーザーのIDを使用\n          record_type: recordType,\n          record_time: new Date().toISOString(),\n          location_id: location,\n          record_method: recordMethod\n        });\n\n      if (error) throw error;\n      setMessage(`${recordType}を記録しました。`);\n    } catch (error) {\n      console.error('打刻エラー:', error);\n      setMessage('打刻に失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center text-blue-600\">勤怠打刻</h1>\n        <div className=\"bg-white shadow-lg rounded-lg p-6 mb-8\">\n          <div className=\"text-4xl font-bold text-center mb-4 text-gray-800\">\n            {currentTime.toLocaleTimeString()}\n          </div>\n          <div className=\"flex justify-center space-x-4 mb-8\">\n            <button onClick={() => handleTimeRecord('出勤')} className=\"flex items-center px-6 py-3 bg-green-500 text-white rounded-lg hover:bg-green-600 transition duration-300\">\n              <FaUserCheck className=\"mr-2\" />\n              出勤\n            </button>\n            <button onClick={() => handleTimeRecord('退勤')} className=\"flex items-center px-6 py-3 bg-red-500 text-white rounded-lg hover:bg-red-600 transition duration-300\">\n              <FaUserTimes className=\"mr-2\" />\n              退勤\n            </button>\n            <button onClick={() => handleTimeRecord('休憩開始')} className=\"flex items-center px-6 py-3 bg-yellow-500 text-white rounded-lg hover:bg-yellow-600 transition duration-300\">\n              <FaCoffee className=\"mr-2\" />\n              休憩開始\n            </button>\n            <button onClick={() => handleTimeRecord('休憩終了')} className=\"flex items-center px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition duration-300\">\n              <FaUtensils className=\"mr-2\" />\n              休憩終了\n            </button>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"recordMethod\">\n              打刻方法\n            </label>\n            <div className=\"relative\">\n              <select\n                id=\"recordMethod\"\n                value={recordMethod}\n                onChange={(e) => setRecordMethod(e.target.value)}\n                className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n              >\n                <option>PCブラウザ</option>\n                <option>スマホアプリ</option>\n                <option>ICカード</option>\n                <option>QRコード</option>\n              </select>\n              <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <BiSelectMultiple className=\"fill-current h-4 w-4\" />\n              </div>\n            </div>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"location\">\n              勤務場所\n            </label>\n            <div className=\"relative\">\n              <select\n                id=\"location\"\n                value={location}\n                onChange={(e) => setLocation(e.target.value)}\n                className=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n              >\n                <option value=\"\">選択してください</option>\n                <option value=\"本社\">本社</option>\n                <option value=\"支社A\">支社A</option>\n                <option value=\"支社B\">支社B</option>\n              </select>\n              <div className=\"pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700\">\n                <FaMapMarkerAlt className=\"fill-current h-4 w-4\" />\n              </div>\n            </div>\n          </div>\n        </div>\n        {message && (\n          <div className=\"bg-blue-100 border-l-4 border-blue-500 text-blue-700 p-4 mb-8\" role=\"alert\">\n            <p>{message}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TimeClock;"
        }
      ]
    },
    {
      "component": "打刻内容表示（日時 打刻種類 勤務場所） 確認ボタン 修正ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "time-clock-confirmation.tsx",
      "operatingProcedure": "1. 表示された打刻内容を確認\n2. 内容が正しければ確認ボタンをクリック\n3. 修正が必要な場合は修正ボタンをクリックし勤怠打刻画面に戻る",
      "description": "打刻内容を確認するための画面",
      "id": "SCR-004",
      "screenName": "打刻確認画面",
      "category": "勤怠打刻",
      "user": "全従業員",
      "relatedBackendHandles": []
    },
    {
      "component": "休暇種類選択（有給休暇 代休 振替休日 夏季休暇 慶弔休暇等） 期間選択（開始日 終了日） 理由入力欄 申請ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "leave-request.tsx",
      "operatingProcedure": "1. 休暇種類を選択\n2. 休暇の開始日と終了日を選択\n3. 必要に応じて理由を入力\n4. 申請ボタンをクリック\n5. 休暇申請確認画面に遷移",
      "description": "従業員が休暇を申請するための画面",
      "id": "SCR-005",
      "screenName": "休暇申請画面",
      "category": "休暇管理",
      "user": "全従業員",
      "relatedBackendHandles": [
        {
          "fileName": "leave-request.ts",
          "handleProcedure": "1. クライアントから受け取った休暇申請情報を検証する\n2. 休暇申請をデータベースに登録する\n3. 承認者に通知を送信する\n4. 登録成功時は成功メッセージを 失敗時はエラーメッセージをクライアントに返す",
          "relatedScreen": "SCR-005",
          "handleName": "休暇申請の処理",
          "description": "従業員の休暇申請を受け取り データベースに登録し 承認ワークフローを開始する",
          "id": "BAC-003",
          "category": "休暇管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaCalendarAlt, FaClipboardList } from 'react-icons/fa';\nimport Topbar from '@/components/Topbar';\nimport { supabase } from '@/supabase';\n\nconst LeaveRequest = () => {\n  const router = useRouter();\n  const [leaveType, setLeaveType] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [reason, setReason] = useState('');\n  const [leaveTypes, setLeaveTypes] = useState([]);\n\n  useEffect(() => {\n    fetchLeaveTypes();\n  }, []);\n\n  const fetchLeaveTypes = async () => {\n    const { data, error } = await supabase.from('leave_types').select('*');\n    if (error) {\n      console.error('Error fetching leave types:', error);\n    } else {\n      setLeaveTypes(data);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const { data: { user } } = await supabase.auth.getUser();\n    if (!user) {\n      alert('ログインが必要です');\n      return;\n    }\n\n    const { data, error } = await supabase\n      .from('leave_requests')\n      .insert([\n        {\n          employee_id: user.id,\n          leave_type_id: leaveType,\n          start_date: startDate,\n          end_date: endDate,\n          reason: reason,\n          status: 'pending'\n        }\n      ]);\n\n    if (error) {\n      console.error('Error submitting leave request:', error);\n      alert('休暇申請の送信に失敗しました');\n    } else {\n      alert('休暇申請が正常に送信されました');\n      router.push('/home');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center text-indigo-700\">休暇申請</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6 max-w-2xl mx-auto\">\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            <div>\n              <label htmlFor=\"leaveType\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                休暇種類\n              </label>\n              <select\n                id=\"leaveType\"\n                value={leaveType}\n                onChange={(e) => setLeaveType(e.target.value)}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                required\n              >\n                <option value=\"\">選択してください</option>\n                {leaveTypes.map((type) => (\n                  <option key={type.id} value={type.id}>\n                    {type.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"flex space-x-4\">\n              <div className=\"flex-1\">\n                <label htmlFor=\"startDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  開始日\n                </label>\n                <input\n                  type=\"date\"\n                  id=\"startDate\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                  required\n                />\n              </div>\n              <div className=\"flex-1\">\n                <label htmlFor=\"endDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  終了日\n                </label>\n                <input\n                  type=\"date\"\n                  id=\"endDate\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                  required\n                />\n              </div>\n            </div>\n            <div>\n              <label htmlFor=\"reason\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                理由\n              </label>\n              <textarea\n                id=\"reason\"\n                value={reason}\n                onChange={(e) => setReason(e.target.value)}\n                rows={4}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n              ></textarea>\n            </div>\n            <div className=\"flex justify-center\">\n              <button\n                type=\"submit\"\n                className=\"px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2\"\n              >\n                申請する\n              </button>\n            </div>\n          </form>\n        </div>\n        <div className=\"mt-8 flex justify-center space-x-4\">\n          <Link href=\"/time-record\" className=\"flex items-center text-indigo-600 hover:text-indigo-800\">\n            <FaClipboardList className=\"mr-2\" />\n            勤怠打刻画面へ\n          </Link>\n          <Link href=\"/shift-management\" className=\"flex items-center text-indigo-600 hover:text-indigo-800\">\n            <FaCalendarAlt className=\"mr-2\" />\n            シフト管理画面へ\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LeaveRequest;"
        }
      ]
    },
    {
      "component": "申請内容表示（休暇種類 期間 理由） 確認ボタン 修正ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "leave-request-confirmation.tsx",
      "operatingProcedure": "1. 表示された申請内容を確認\n2. 内容が正しければ確認ボタンをクリック\n3. 修正が必要な場合は修正ボタンをクリックし休暇申請画面に戻る",
      "description": "申請した休暇内容を確認するための画面",
      "id": "SCR-006",
      "screenName": "休暇申請確認画面",
      "category": "休暇管理",
      "user": "全従業員",
      "relatedBackendHandles": []
    },
    {
      "component": "カレンダー表示 シフト一覧 シフト登録ボタン 希望シフト申請ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "shift-management.tsx",
      "operatingProcedure": "1. カレンダーでシフトを確認\n2. シフト登録ボタンをクリックしてシフト登録画面に遷移\n3. 希望シフト申請ボタンをクリックして希望シフト申請画面に遷移",
      "description": "シフトの管理や確認を行うための画面",
      "id": "SCR-007",
      "screenName": "シフト管理画面",
      "category": "シフト管理",
      "user": "全従業員 人事部門 管理職",
      "relatedBackendHandles": []
    },
    {
      "component": "従業員選択 日付選択 時間選択（開始時間 終了時間） 勤務場所選択 シフトパターン選択 登録ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "shift-registration.tsx",
      "operatingProcedure": "1. シフトを登録する従業員を選択\n2. 勤務日を選択\n3. 勤務開始時間と終了時間を設定\n4. 勤務場所を選択\n5. 必要に応じてシフトパターンを選択\n6. 登録ボタンをクリック",
      "description": "新しいシフトを登録するための画面",
      "id": "SCR-008",
      "screenName": "シフト登録画面",
      "category": "シフト管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": [
        {
          "fileName": "shift-registration.ts",
          "handleProcedure": "1. クライアントから受け取ったシフト情報を検証する\n2. シフト情報をデータベースに登録する\n3. 登録成功時は成功メッセージを 失敗時はエラーメッセージをクライアントに返す",
          "relatedScreen": "SCR-008",
          "handleName": "シフト登録の処理",
          "description": "管理者が作成したシフト情報を受け取り データベースに登録する",
          "id": "BAC-004",
          "category": "シフト管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaCalendarAlt, FaClock, FaMapMarkerAlt, FaUser } from 'react-icons/fa';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst ShiftRegistration = () => {\n  const router = useRouter();\n  const [employees, setEmployees] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [selectedEmployee, setSelectedEmployee] = useState('');\n  const [date, setDate] = useState('');\n  const [startTime, setStartTime] = useState('');\n  const [endTime, setEndTime] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [shiftPattern, setShiftPattern] = useState('');\n\n  useEffect(() => {\n    fetchEmployees();\n    fetchLocations();\n  }, []);\n\n  const fetchEmployees = async () => {\n    const { data, error } = await supabase.from('employees').select('id, first_name, last_name');\n    if (error) {\n      console.error('Error fetching employees:', error);\n    } else {\n      setEmployees(data);\n    }\n  };\n\n  const fetchLocations = async () => {\n    const { data, error } = await supabase.from('locations').select('id, name');\n    if (error) {\n      console.error('Error fetching locations:', error);\n    } else {\n      setLocations(data);\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const shiftData = {\n      employee_id: selectedEmployee,\n      start_time: `${date}T${startTime}:00`,\n      end_time: `${date}T${endTime}:00`,\n      location_id: selectedLocation,\n      is_confirmed: false,\n    };\n\n    const { data, error } = await supabase.from('shifts').insert([shiftData]);\n\n    if (error) {\n      console.error('Error registering shift:', error);\n      alert('シフトの登録に失敗しました。');\n    } else {\n      alert('シフトが正常に登録されました。');\n      router.push('/shift-management');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-center\">シフト登録</h1>\n        <form onSubmit={handleSubmit} className=\"max-w-2xl mx-auto bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"employee\">\n              <FaUser className=\"inline-block mr-2\" />\n              従業員\n            </label>\n            <select\n              id=\"employee\"\n              value={selectedEmployee}\n              onChange={(e) => setSelectedEmployee(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            >\n              <option value=\"\">従業員を選択してください</option>\n              {employees.map((employee) => (\n                <option key={employee.id} value={employee.id}>\n                  {`${employee.last_name} ${employee.first_name}`}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"date\">\n              <FaCalendarAlt className=\"inline-block mr-2\" />\n              日付\n            </label>\n            <input\n              type=\"date\"\n              id=\"date\"\n              value={date}\n              onChange={(e) => setDate(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            />\n          </div>\n          <div className=\"flex mb-4\">\n            <div className=\"w-1/2 mr-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"startTime\">\n                <FaClock className=\"inline-block mr-2\" />\n                開始時間\n              </label>\n              <input\n                type=\"time\"\n                id=\"startTime\"\n                value={startTime}\n                onChange={(e) => setStartTime(e.target.value)}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              />\n            </div>\n            <div className=\"w-1/2 ml-2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"endTime\">\n                <FaClock className=\"inline-block mr-2\" />\n                終了時間\n              </label>\n              <input\n                type=\"time\"\n                id=\"endTime\"\n                value={endTime}\n                onChange={(e) => setEndTime(e.target.value)}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              />\n            </div>\n          </div>\n          <div className=\"mb-4\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"location\">\n              <FaMapMarkerAlt className=\"inline-block mr-2\" />\n              勤務場所\n            </label>\n            <select\n              id=\"location\"\n              value={selectedLocation}\n              onChange={(e) => setSelectedLocation(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            >\n              <option value=\"\">勤務場所を選択してください</option>\n              {locations.map((location) => (\n                <option key={location.id} value={location.id}>\n                  {location.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"shiftPattern\">\n              シフトパターン\n            </label>\n            <input\n              type=\"text\"\n              id=\"shiftPattern\"\n              value={shiftPattern}\n              onChange={(e) => setShiftPattern(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              placeholder=\"例：早番、遅番など（任意）\"\n            />\n          </div>\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              登録\n            </button>\n            <Link href=\"/shift-management\">\n              <span className=\"inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800\">\n                キャンセル\n              </span>\n            </Link>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ShiftRegistration;"
        }
      ]
    },
    {
      "component": "カレンダー表示 時間選択（希望開始時間 希望終了時間） 希望理由入力欄 申請ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "shift-request.tsx",
      "operatingProcedure": "1. カレンダーから希望日を選択\n2. 希望する勤務開始時間と終了時間を設定\n3. 希望理由を入力\n4. 申請ボタンをクリック",
      "description": "従業員が希望するシフトを申請するための画面",
      "id": "SCR-009",
      "screenName": "希望シフト申請画面",
      "category": "シフト管理",
      "user": "全従業員",
      "relatedBackendHandles": []
    },
    {
      "component": "期間選択 従業員選択 データ表示（勤務時間 残業時間 休暇取得状況） グラフ表示 データ出力ボタン レポート作成ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "attendance-data-management.tsx",
      "operatingProcedure": "1. 分析したい期間を選択\n2. 対象従業員を選択\n3. 表示されたデータやグラフを確認\n4. 必要に応じてデータ出力ボタンでCSVファイルを出力\n5. レポート作成ボタンでレポート作成画面に遷移",
      "description": "勤怠データの管理や分析を行うための画面",
      "id": "SCR-010",
      "screenName": "勤怠データ管理画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職 経営層",
      "relatedBackendHandles": []
    },
    {
      "component": "従業員一覧 ステータス表示（出勤中 退勤 休憩中） 勤務時間表示 フィルター機能",
      "accessRight": "ログインユーザー",
      "fileName": "attendance-status.tsx",
      "operatingProcedure": "1. 画面上の従業員一覧で現在の勤怠状況を確認\n2. 必要に応じてフィルター機能を使用して表示を絞り込み\n3. 特定の従業員をクリックして詳細情報を表示",
      "description": "従業員の勤怠状況をリアルタイムで確認するための画面",
      "id": "SCR-011",
      "screenName": "勤怠状況確認画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": []
    },
    {
      "component": "期間選択 従業員選択 残業時間表示 色分け表示（警告レベル） フィルター機能 アラート設定ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "overtime-status.tsx",
      "operatingProcedure": "1. 確認したい期間を選択\n2. 対象従業員を選択または全体表示\n3. 色分け表示で残業状況を視覚的に確認\n4. 必要に応じてフィルター機能を使用\n5. アラート設定ボタンでアラート設定画面に遷移",
      "description": "従業員の残業状況を確認し管理するための画面",
      "id": "SCR-012",
      "screenName": "残業状況画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職 経営層",
      "relatedBackendHandles": []
    },
    {
      "component": "レポート種類選択（日次 月次 残業 有給 36協定等） 期間選択 従業員選択 グラフ種類選択 作成ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "report-creation.tsx",
      "operatingProcedure": "1. 作成したいレポートの種類を選択\n2. 対象期間を選択\n3. 対象従業員を選択\n4. 必要に応じてグラフの種類を選択\n5. 作成ボタンをクリックしてレポートを生成",
      "description": "勤怠データに基づいて各種レポートを作成するための画面",
      "id": "SCR-013",
      "screenName": "レポート作成画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職 経営層",
      "relatedBackendHandles": [
        {
          "fileName": "attendance-report.ts",
          "handleProcedure": "1. クライアントから受け取った集計条件を検証する\n2. データベースから該当する勤怠データを取得する\n3. データを集計し レポートを生成する\n4. 生成したレポートデータをクライアントに返す",
          "relatedScreen": "SCR-013",
          "handleName": "勤怠データの集計",
          "description": "指定された期間の勤怠データを集計し レポートを生成する",
          "id": "BAC-005",
          "category": "勤怠データ管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaCalendarAlt, FaUsers, FaChartBar } from 'react-icons/fa';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\n\nconst ReportCreation = () => {\n  const router = useRouter();\n  const [reportType, setReportType] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [selectedEmployees, setSelectedEmployees] = useState([]);\n  const [chartType, setChartType] = useState('');\n  const [employees, setEmployees] = useState([]);\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const fetchEmployees = async () => {\n    try {\n      const { data, error } = await supabase\n        .from('employees')\n        .select('id, first_name, last_name')\n        .order('last_name', { ascending: true });\n\n      if (error) throw error;\n      setEmployees(data);\n    } catch (error) {\n      console.error('従業員データの取得に失敗しました:', error.message);\n      // サンプルデータを表示\n      setEmployees([\n        { id: 1, first_name: '太郎', last_name: '山田' },\n        { id: 2, first_name: '花子', last_name: '鈴木' },\n      ]);\n    }\n  };\n\n  const handleEmployeeSelect = (employeeId) => {\n    setSelectedEmployees(prev =>\n      prev.includes(employeeId)\n        ? prev.filter(id => id !== employeeId)\n        : [...prev, employeeId]\n    );\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { data, error } = await supabase.rpc('generate_report', {\n        report_type: reportType,\n        start_date: startDate,\n        end_date: endDate,\n        employee_ids: selectedEmployees,\n        chart_type: chartType\n      });\n\n      if (error) throw error;\n      \n      // レポート生成成功時の処理\n      alert('レポートが正常に生成されました。');\n      // レポート表示画面へ遷移\n      router.push('/report-display');\n    } catch (error) {\n      console.error('レポート生成に失敗しました:', error.message);\n      alert('レポート生成に失敗しました。もう一度お試しください。');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">レポート作成</h1>\n        <form onSubmit={handleSubmit} className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"reportType\">\n              レポート種類\n            </label>\n            <select\n              id=\"reportType\"\n              value={reportType}\n              onChange={(e) => setReportType(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              required\n            >\n              <option value=\"\">選択してください</option>\n              <option value=\"daily\">日次</option>\n              <option value=\"monthly\">月次</option>\n              <option value=\"overtime\">残業</option>\n              <option value=\"paid_leave\">有給休暇</option>\n              <option value=\"36_agreement\">36協定</option>\n            </select>\n          </div>\n\n          <div className=\"mb-6 flex space-x-4\">\n            <div className=\"w-1/2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"startDate\">\n                開始日\n              </label>\n              <input\n                type=\"date\"\n                id=\"startDate\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              />\n            </div>\n            <div className=\"w-1/2\">\n              <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"endDate\">\n                終了日\n              </label>\n              <input\n                type=\"date\"\n                id=\"endDate\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n                required\n              />\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\">\n              従業員選択\n            </label>\n            <div className=\"max-h-48 overflow-y-auto border rounded p-2\">\n              {employees.map((employee) => (\n                <div key={employee.id} className=\"flex items-center mb-2\">\n                  <input\n                    type=\"checkbox\"\n                    id={`employee-${employee.id}`}\n                    checked={selectedEmployees.includes(employee.id)}\n                    onChange={() => handleEmployeeSelect(employee.id)}\n                    className=\"mr-2\"\n                  />\n                  <label htmlFor={`employee-${employee.id}`}>\n                    {employee.last_name} {employee.first_name}\n                  </label>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <label className=\"block text-gray-700 text-sm font-bold mb-2\" htmlFor=\"chartType\">\n              グラフ種類\n            </label>\n            <select\n              id=\"chartType\"\n              value={chartType}\n              onChange={(e) => setChartType(e.target.value)}\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n            >\n              <option value=\"\">選択してください</option>\n              <option value=\"bar\">棒グラフ</option>\n              <option value=\"line\">折れ線グラフ</option>\n              <option value=\"pie\">円グラフ</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <button\n              type=\"submit\"\n              className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline\"\n            >\n              レポート作成\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ReportCreation;"
        }
      ]
    },
    {
      "component": "期間選択 従業員選択 出力項目選択 ファイル形式選択 出力ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "data-export.tsx",
      "operatingProcedure": "1. 出力したいデータの期間を選択\n2. 対象従業員を選択\n3. 出力したい項目をチェック\n4. ファイル形式（CSV等）を選択\n5. 出力ボタンをクリックしてデータをダウンロード",
      "description": "勤怠データをCSV形式で出力するための画面",
      "id": "SCR-014",
      "screenName": "データ出力画面",
      "category": "勤怠データ管理",
      "user": "人事部門",
      "relatedBackendHandles": [
        {
          "fileName": "data-export.ts",
          "handleProcedure": "1. クライアントから受け取った出力条件を検証する\n2. データベースから該当するデータを取得する\n3. 取得したデータをCSV形式に変換する\n4. 生成したCSVデータをクライアントに返す",
          "relatedScreen": "SCR-014",
          "handleName": "CSVデータ出力",
          "description": "指定された条件に基づいて勤怠データをCSV形式で出力する",
          "id": "BAC-006",
          "category": "勤怠データ管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaFileExport, FaCalendarAlt, FaUserFriends, FaListUl, FaFileAlt } from 'react-icons/fa';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst DataExport: React.FC = () => {\n  const router = useRouter();\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [selectedEmployees, setSelectedEmployees] = useState<string[]>([]);\n  const [selectedItems, setSelectedItems] = useState<string[]>([]);\n  const [fileFormat, setFileFormat] = useState('csv');\n  const [employees, setEmployees] = useState<any[]>([]);\n\n  useEffect(() => {\n    fetchEmployees();\n  }, []);\n\n  const fetchEmployees = async () => {\n    const { data, error } = await supabase.from('employees').select('id, last_name, first_name');\n    if (error) {\n      console.error('従業員データの取得に失敗しました:', error);\n    } else {\n      setEmployees(data || []);\n    }\n  };\n\n  const handleEmployeeSelection = (employeeId: string) => {\n    setSelectedEmployees(prev =>\n      prev.includes(employeeId)\n        ? prev.filter(id => id !== employeeId)\n        : [...prev, employeeId]\n    );\n  };\n\n  const handleItemSelection = (item: string) => {\n    setSelectedItems(prev =>\n      prev.includes(item)\n        ? prev.filter(i => i !== item)\n        : [...prev, item]\n    );\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch('/api/export-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          startDate,\n          endDate,\n          selectedEmployees,\n          selectedItems,\n          fileFormat,\n        }),\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `勤怠データ_${startDate}_${endDate}.${fileFormat}`;\n        document.body.appendChild(a);\n        a.click();\n        window.URL.revokeObjectURL(url);\n      } else {\n        console.error('データのエクスポートに失敗しました');\n      }\n    } catch (error) {\n      console.error('エクスポート中にエラーが発生しました:', error);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">データ出力</h1>\n\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-8\">\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <FaCalendarAlt className=\"mr-2 text-blue-500\" />\n              期間選択\n            </h2>\n            <div className=\"flex space-x-4\">\n              <input\n                type=\"date\"\n                value={startDate}\n                onChange={(e) => setStartDate(e.target.value)}\n                className=\"border rounded-md p-2 flex-1\"\n              />\n              <span className=\"text-gray-500 self-center\">から</span>\n              <input\n                type=\"date\"\n                value={endDate}\n                onChange={(e) => setEndDate(e.target.value)}\n                className=\"border rounded-md p-2 flex-1\"\n              />\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <FaUserFriends className=\"mr-2 text-blue-500\" />\n              従業員選択\n            </h2>\n            <div className=\"grid grid-cols-3 gap-4\">\n              {employees.map((employee) => (\n                <label key={employee.id} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedEmployees.includes(employee.id)}\n                    onChange={() => handleEmployeeSelection(employee.id)}\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                  <span>{`${employee.last_name} ${employee.first_name}`}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <FaListUl className=\"mr-2 text-blue-500\" />\n              出力項目選択\n            </h2>\n            <div className=\"grid grid-cols-3 gap-4\">\n              {['勤務時間', '休憩時間', '残業時間', '有給休暇', '欠勤'].map((item) => (\n                <label key={item} className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={selectedItems.includes(item)}\n                    onChange={() => handleItemSelection(item)}\n                    className=\"form-checkbox h-5 w-5 text-blue-600\"\n                  />\n                  <span>{item}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"mb-6\">\n            <h2 className=\"text-xl font-semibold mb-4 flex items-center\">\n              <FaFileAlt className=\"mr-2 text-blue-500\" />\n              ファイル形式選択\n            </h2>\n            <select\n              value={fileFormat}\n              onChange={(e) => setFileFormat(e.target.value)}\n              className=\"border rounded-md p-2 w-full\"\n            >\n              <option value=\"csv\">CSV</option>\n              <option value=\"xlsx\">Excel</option>\n              <option value=\"pdf\">PDF</option>\n            </select>\n          </div>\n\n          <button\n            onClick={handleExport}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center w-full\"\n          >\n            <FaFileExport className=\"mr-2\" />\n            出力\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DataExport;"
        }
      ]
    },
    {
      "component": "勤務区分設定ボタン アラート設定ボタン システム連携設定ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "settings.tsx",
      "operatingProcedure": "1. 設定したい項目のボタンをクリック\n2. 各設定画面に遷移",
      "description": "システムの各種設定を行うための画面",
      "id": "SCR-015",
      "screenName": "設定画面",
      "category": "設定",
      "user": "人事部門 システム管理者",
      "relatedBackendHandles": [
        {
          "fileName": "system-settings.ts",
          "handleProcedure": "1. クライアントから受け取った設定情報を検証する\n2. 設定情報をデータベースに更新する\n3. 更新成功時は成功メッセージを 失敗時はエラーメッセージをクライアントに返す",
          "relatedScreen": "SCR-015",
          "handleName": "システム設定の更新",
          "description": "勤務区分 アラート条件 システム連携などのシステム設定を更新する",
          "id": "BAC-007",
          "category": "設定",
          "relatedFrontendCode": "import React, { useState } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport Topbar from '@/components/Topbar';\nimport { FaCog, FaBell, FaLink } from 'react-icons/fa';\n\nconst Settings = () => {\n  const router = useRouter();\n  const [activeTab, setActiveTab] = useState('勤務区分');\n\n  const handleTabClick = (tab: string) => {\n    setActiveTab(tab);\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-8 text-gray-800\">設定画面</h1>\n        <div className=\"bg-white rounded-lg shadow-md p-6\">\n          <div className=\"flex mb-6\">\n            <button\n              onClick={() => handleTabClick('勤務区分')}\n              className={`mr-4 px-4 py-2 rounded-md ${\n                activeTab === '勤務区分'\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-200 text-gray-700'\n              }`}\n            >\n              <FaCog className=\"inline-block mr-2\" />\n              勤務区分設定\n            </button>\n            <button\n              onClick={() => handleTabClick('アラート')}\n              className={`mr-4 px-4 py-2 rounded-md ${\n                activeTab === 'アラート'\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-200 text-gray-700'\n              }`}\n            >\n              <FaBell className=\"inline-block mr-2\" />\n              アラート設定\n            </button>\n            <button\n              onClick={() => handleTabClick('システム連携')}\n              className={`px-4 py-2 rounded-md ${\n                activeTab === 'システム連携'\n                  ? 'bg-blue-500 text-white'\n                  : 'bg-gray-200 text-gray-700'\n              }`}\n            >\n              <FaLink className=\"inline-block mr-2\" />\n              システム連携設定\n            </button>\n          </div>\n\n          {activeTab === '勤務区分' && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">勤務区分設定</h2>\n              {/* 勤務区分設定の内容をここに追加 */}\n            </div>\n          )}\n\n          {activeTab === 'アラート' && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">アラート設定</h2>\n              {/* アラート設定の内容をここに追加 */}\n            </div>\n          )}\n\n          {activeTab === 'システム連携' && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">システム連携設定</h2>\n              {/* システム連携設定の内容をここに追加 */}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;"
        }
      ]
    },
    {
      "component": "勤務区分一覧 新規追加ボタン 編集ボタン 削除ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "work-category-settings.tsx",
      "operatingProcedure": "1. 既存の勤務区分を確認\n2. 新規追加ボタンで新しい勤務区分を作成\n3. 編集ボタンで既存の勤務区分を修正\n4. 削除ボタンで不要な勤務区分を削除",
      "description": "勤務時間や休憩時間などの勤務区分を設定するための画面",
      "id": "SCR-016",
      "screenName": "勤務区分設定画面",
      "category": "設定",
      "user": "人事部門",
      "relatedBackendHandles": []
    },
    {
      "component": "アラート種類選択 条件設定（対象勤怠 対象期間 基準値） 通知方法設定 保存ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "alert-settings.tsx",
      "operatingProcedure": "1. 設定したいアラートの種類を選択\n2. アラートの条件（対象勤怠 対象期間 基準値）を設定\n3. 通知方法（メール システム通知等）を選択\n4. 保存ボタンをクリックして設定を反映",
      "description": "残業アラートなどのアラート条件を設定するための画面",
      "id": "SCR-017",
      "screenName": "アラート設定画面",
      "category": "設定",
      "user": "人事部門 システム管理者",
      "relatedBackendHandles": []
    },
    {
      "component": "連携システム一覧 新規連携追加ボタン 編集ボタン 削除ボタン テスト連携ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "system-integration-settings.tsx",
      "operatingProcedure": "1. 既存の連携システムを確認\n2. 新規連携追加ボタンで新しいシステムとの連携を設定\n3. 編集ボタンで既存の連携設定を修正\n4. 削除ボタンで不要な連携を解除\n5. テスト連携ボタンで連携が正常に機能するか確認",
      "description": "他のシステムとの連携を設定するための画面",
      "id": "SCR-018",
      "screenName": "システム連携設定画面",
      "category": "設定",
      "user": "システム管理者",
      "relatedBackendHandles": [
        {
          "fileName": "system-integration.ts",
          "handleProcedure": "1. 連携対象のデータをデータベースから取得する\n2. データを連携先システムの形式に変換する\n3. APIを使用して連携先システムにデータを送信する\n4. 連携結果をログに記録し 必要に応じて管理者に通知する",
          "relatedScreen": "SCR-018",
          "handleName": "外部システムとのデータ連携",
          "description": "給与計算システムや人事システムなど 外部システムとのデータ連携を行う",
          "id": "BAC-010",
          "category": "システム連携",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaPlus, FaEdit, FaTrash, FaCheck } from 'react-icons/fa';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst SystemIntegrationSettings = () => {\n  const [integrations, setIntegrations] = useState([]);\n  const [newIntegration, setNewIntegration] = useState({ name: '', type: '', status: '未接続' });\n  const [editingId, setEditingId] = useState(null);\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchIntegrations();\n  }, []);\n\n  const fetchIntegrations = async () => {\n    try {\n      const { data, error } = await supabase.from('system_integrations').select('*');\n      if (error) throw error;\n      setIntegrations(data || []);\n    } catch (error) {\n      console.error('システム連携の取得に失敗しました:', error.message);\n      // サンプルデータを表示\n      setIntegrations([\n        { id: 1, name: '給与計算システム', type: 'API', status: '接続済み' },\n        { id: 2, name: '人事システム', type: 'データベース', status: '未接続' },\n      ]);\n    }\n  };\n\n  const handleAddIntegration = async () => {\n    try {\n      const { data, error } = await supabase.from('system_integrations').insert([newIntegration]);\n      if (error) throw error;\n      setIntegrations([...integrations, data[0]]);\n      setNewIntegration({ name: '', type: '', status: '未接続' });\n    } catch (error) {\n      console.error('新規連携の追加に失敗しました:', error.message);\n    }\n  };\n\n  const handleEditIntegration = async (id) => {\n    if (editingId === id) {\n      try {\n        const { error } = await supabase\n          .from('system_integrations')\n          .update(integrations.find(i => i.id === id))\n          .eq('id', id);\n        if (error) throw error;\n        setEditingId(null);\n      } catch (error) {\n        console.error('連携の編集に失敗しました:', error.message);\n      }\n    } else {\n      setEditingId(id);\n    }\n  };\n\n  const handleDeleteIntegration = async (id) => {\n    try {\n      const { error } = await supabase.from('system_integrations').delete().eq('id', id);\n      if (error) throw error;\n      setIntegrations(integrations.filter(i => i.id !== id));\n    } catch (error) {\n      console.error('連携の削除に失敗しました:', error.message);\n    }\n  };\n\n  const handleTestIntegration = async (id) => {\n    // 実際のテスト連携ロジックをここに実装\n    alert(`ID: ${id} の連携をテストしています...`);\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6\">システム連携設定</h1>\n        <div className=\"bg-white shadow-md rounded-lg p-6 mb-6\">\n          <h2 className=\"text-xl font-semibold mb-4\">新規連携追加</h2>\n          <div className=\"flex space-x-4\">\n            <input\n              type=\"text\"\n              placeholder=\"連携名\"\n              className=\"flex-1 border rounded-md px-3 py-2\"\n              value={newIntegration.name}\n              onChange={(e) => setNewIntegration({ ...newIntegration, name: e.target.value })}\n            />\n            <input\n              type=\"text\"\n              placeholder=\"連携タイプ\"\n              className=\"flex-1 border rounded-md px-3 py-2\"\n              value={newIntegration.type}\n              onChange={(e) => setNewIntegration({ ...newIntegration, type: e.target.value })}\n            />\n            <button\n              onClick={handleAddIntegration}\n              className=\"bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition-colors\"\n            >\n              <FaPlus className=\"inline mr-2\" />\n              追加\n            </button>\n          </div>\n        </div>\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-200\">\n              <tr>\n                <th className=\"px-6 py-3 text-left\">連携名</th>\n                <th className=\"px-6 py-3 text-left\">タイプ</th>\n                <th className=\"px-6 py-3 text-left\">ステータス</th>\n                <th className=\"px-6 py-3 text-left\">アクション</th>\n              </tr>\n            </thead>\n            <tbody>\n              {integrations.map((integration) => (\n                <tr key={integration.id} className=\"border-b\">\n                  <td className=\"px-6 py-4\">\n                    {editingId === integration.id ? (\n                      <input\n                        type=\"text\"\n                        value={integration.name}\n                        onChange={(e) => setIntegrations(integrations.map(i => i.id === integration.id ? { ...i, name: e.target.value } : i))}\n                        className=\"border rounded-md px-2 py-1 w-full\"\n                      />\n                    ) : (\n                      integration.name\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    {editingId === integration.id ? (\n                      <input\n                        type=\"text\"\n                        value={integration.type}\n                        onChange={(e) => setIntegrations(integrations.map(i => i.id === integration.id ? { ...i, type: e.target.value } : i))}\n                        className=\"border rounded-md px-2 py-1 w-full\"\n                      />\n                    ) : (\n                      integration.type\n                    )}\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <span className={`px-2 py-1 rounded-full text-sm ${integration.status === '接続済み' ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'}`}>\n                      {integration.status}\n                    </span>\n                  </td>\n                  <td className=\"px-6 py-4\">\n                    <button\n                      onClick={() => handleEditIntegration(integration.id)}\n                      className=\"text-blue-500 hover:text-blue-700 mr-2\"\n                    >\n                      {editingId === integration.id ? <FaCheck /> : <FaEdit />}\n                    </button>\n                    <button\n                      onClick={() => handleDeleteIntegration(integration.id)}\n                      className=\"text-red-500 hover:text-red-700 mr-2\"\n                    >\n                      <FaTrash />\n                    </button>\n                    <button\n                      onClick={() => handleTestIntegration(integration.id)}\n                      className=\"bg-green-500 text-white px-3 py-1 rounded-md hover:bg-green-600 transition-colors\"\n                    >\n                      テスト連携\n                    </button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SystemIntegrationSettings;"
        }
      ]
    },
    {
      "component": "従業員情報表示 期間選択 勤怠記録一覧 勤務時間集計 残業時間集計 休暇取得状況 勤怠修正ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "employee-attendance-detail.tsx",
      "operatingProcedure": "1. 対象の従業員を選択\n2. 確認したい期間を選択\n3. 表示された勤怠記録や集計情報を確認\n4. 必要に応じて勤怠修正ボタンをクリックし勤怠修正画面に遷移",
      "description": "個別の従業員の勤怠詳細を確認するための画面",
      "id": "SCR-019",
      "screenName": "従業員別勤怠詳細画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": []
    },
    {
      "component": "アラート一覧（従業員名 アラート種類 発生日時 残業時間） 詳細表示ボタン 対応済みマークボタン フィルター機能",
      "accessRight": "ログインユーザー",
      "fileName": "overtime-alert.tsx",
      "operatingProcedure": "1. 表示されたアラート一覧を確認\n2. 必要に応じてフィルター機能を使用して表示を絞り込み\n3. 詳細表示ボタンをクリックして各アラートの詳細情報を確認\n4. 対応後対応済みマークボタンをクリックしてアラートを処理済みに変更",
      "description": "残業アラートを確認し対応するための画面",
      "id": "SCR-020",
      "screenName": "残業アラート画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": [
        {
          "fileName": "overtime-alert.ts",
          "handleProcedure": "1. 定期的に勤怠データをチェックする\n2. 設定された条件に該当する残業状況を検出する\n3. アラート情報をデータベースに登録する\n4. 該当する管理者にアラート通知を送信する",
          "relatedScreen": "SCR-020",
          "handleName": "残業アラートの生成",
          "description": "設定された条件に基づいて残業アラートを生成し 通知する",
          "id": "BAC-008",
          "category": "残業管理",
          "relatedFrontendCode": "import { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { supabase } from '@/supabase';\nimport Topbar from '@/components/Topbar';\nimport { FiFilter, FiEye, FiCheck } from 'react-icons/fi';\n\nconst OvertimeAlertPage = () => {\n  const [alerts, setAlerts] = useState([]);\n  const [filter, setFilter] = useState('');\n  const router = useRouter();\n\n  useEffect(() => {\n    fetchAlerts();\n  }, []);\n\n  const fetchAlerts = async () => {\n    const { data, error } = await supabase\n      .from('overtime_alerts')\n      .select(`\n        id,\n        alert_type,\n        alert_date,\n        overtime_hours,\n        threshold_hours,\n        is_resolved,\n        employees (\n          first_name,\n          last_name\n        )\n      `)\n      .order('alert_date', { ascending: false });\n\n    if (error) {\n      console.error('Error fetching alerts:', error);\n      // サンプルデータを表示\n      setAlerts([\n        {\n          id: '1',\n          alert_type: '日次残業',\n          alert_date: '2023-06-01',\n          overtime_hours: 3.5,\n          threshold_hours: 2,\n          is_resolved: false,\n          employees: { first_name: '太郎', last_name: '山田' }\n        },\n        {\n          id: '2',\n          alert_type: '月次残業',\n          alert_date: '2023-06-15',\n          overtime_hours: 45,\n          threshold_hours: 40,\n          is_resolved: true,\n          employees: { first_name: '花子', last_name: '鈴木' }\n        }\n      ]);\n    } else {\n      setAlerts(data);\n    }\n  };\n\n  const handleFilter = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const filteredAlerts = alerts.filter(alert =>\n    alert.employees.last_name.includes(filter) ||\n    alert.employees.first_name.includes(filter) ||\n    alert.alert_type.includes(filter)\n  );\n\n  const handleResolve = async (id) => {\n    const { error } = await supabase\n      .from('overtime_alerts')\n      .update({ is_resolved: true })\n      .eq('id', id);\n\n    if (error) {\n      console.error('Error resolving alert:', error);\n    } else {\n      fetchAlerts();\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6\">残業アラート画面</h1>\n        <div className=\"mb-4 flex items-center\">\n          <FiFilter className=\"mr-2\" />\n          <input\n            type=\"text\"\n            placeholder=\"フィルター\"\n            value={filter}\n            onChange={handleFilter}\n            className=\"border rounded px-2 py-1\"\n          />\n        </div>\n        <div className=\"bg-white shadow-md rounded-lg overflow-hidden\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-200\">\n              <tr>\n                <th className=\"px-4 py-2\">従業員名</th>\n                <th className=\"px-4 py-2\">アラート種類</th>\n                <th className=\"px-4 py-2\">発生日時</th>\n                <th className=\"px-4 py-2\">残業時間</th>\n                <th className=\"px-4 py-2\">アクション</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredAlerts.map((alert) => (\n                <tr key={alert.id} className=\"border-b\">\n                  <td className=\"px-4 py-2\">{`${alert.employees.last_name} ${alert.employees.first_name}`}</td>\n                  <td className=\"px-4 py-2\">{alert.alert_type}</td>\n                  <td className=\"px-4 py-2\">{new Date(alert.alert_date).toLocaleDateString()}</td>\n                  <td className=\"px-4 py-2\">{`${alert.overtime_hours}時間`}</td>\n                  <td className=\"px-4 py-2 flex items-center\">\n                    <button\n                      onClick={() => router.push(`/overtime-alert-detail/${alert.id}`)}\n                      className=\"mr-2 bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600\"\n                    >\n                      <FiEye />\n                    </button>\n                    {!alert.is_resolved && (\n                      <button\n                        onClick={() => handleResolve(alert.id)}\n                        className=\"bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600\"\n                      >\n                        <FiCheck />\n                      </button>\n                    )}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default OvertimeAlertPage;"
        }
      ]
    },
    {
      "component": "レポート内容表示（グラフ 表） 期間選択 従業員選択 データフィルター機能 印刷ボタン エクスポートボタン",
      "accessRight": "ログインユーザー",
      "fileName": "report-display.tsx",
      "operatingProcedure": "1. 表示されたレポート内容（グラフ 表）を確認\n2. 必要に応じて期間や対象従業員を変更\n3. データフィルター機能を使用して詳細分析\n4. 印刷ボタンでレポートを印刷\n5. エクスポートボタンでデータをエクスポート",
      "description": "生成されたレポートを表示し分析するための画面",
      "id": "SCR-021",
      "screenName": "レポート表示画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職 経営層",
      "relatedBackendHandles": []
    },
    {
      "component": "カレンダー表示 従業員一覧 希望シフト表示 確定シフト表示 調整ツール（ドラッグ＆ドロップ） 一括承認ボタン 個別調整ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "shift-adjustment.tsx",
      "operatingProcedure": "1. カレンダー上で希望シフトと確定シフトを確認\n2. ドラッグ＆ドロップで簡単にシフトを調整\n3. 一括承認ボタンで問題ない希望シフトを一括承認\n4. 個別調整ボタンで詳細な調整が必要なシフトを個別に調整",
      "description": "従業員の希望シフトを確認し調整するための画面",
      "id": "SCR-022",
      "screenName": "シフト調整画面",
      "category": "シフト管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": [
        {
          "fileName": "shift-auto-generation.ts",
          "handleProcedure": "1. データベースから従業員の希望シフトと利用可能な時間帯を取得する\n2. 設定されたルールに基づいてシフトを自動生成する\n3. 生成したシフト案をデータベースに登録する\n4. 生成完了通知を管理者に送信する",
          "relatedScreen": "SCR-022",
          "handleName": "シフト自動生成",
          "description": "設定されたルールと従業員の希望に基づいて シフトを自動的に生成する",
          "id": "BAC-009",
          "category": "シフト管理",
          "relatedFrontendCode": "import React, { useState, useEffect } from 'react';\nimport { useRouter } from 'next/router';\nimport Link from 'next/link';\nimport { FaCalendarAlt, FaUserFriends, FaCheck, FaEdit } from 'react-icons/fa';\nimport { createClient } from '@supabase/supabase-js';\nimport Topbar from '@/components/Topbar';\n\nconst supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL, process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY);\n\nconst ShiftAdjustmentPage = () => {\n  const router = useRouter();\n  const [employees, setEmployees] = useState([]);\n  const [shifts, setShifts] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(new Date());\n\n  useEffect(() => {\n    fetchEmployees();\n    fetchShifts();\n  }, []);\n\n  const fetchEmployees = async () => {\n    const { data, error } = await supabase.from('employees').select('*');\n    if (error) {\n      console.error('従業員データの取得に失敗しました:', error);\n    } else {\n      setEmployees(data);\n    }\n  };\n\n  const fetchShifts = async () => {\n    const { data, error } = await supabase.from('shifts').select('*');\n    if (error) {\n      console.error('シフトデータの取得に失敗しました:', error);\n    } else {\n      setShifts(data);\n    }\n  };\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  const handleDragStart = (e, shiftId) => {\n    e.dataTransfer.setData('text/plain', shiftId);\n  };\n\n  const handleDrop = async (e, employeeId, date) => {\n    e.preventDefault();\n    const shiftId = e.dataTransfer.getData('text');\n    \n    // ここでシフトの更新処理を実装\n    const { data, error } = await supabase\n      .from('shifts')\n      .update({ employee_id: employeeId, start_time: date })\n      .eq('id', shiftId);\n\n    if (error) {\n      console.error('シフトの更新に失敗しました:', error);\n    } else {\n      fetchShifts(); // シフトを再取得して表示を更新\n    }\n  };\n\n  const handleBulkApprove = async () => {\n    // 一括承認の処理を実装\n    const { data, error } = await supabase\n      .from('shifts')\n      .update({ is_confirmed: true })\n      .eq('is_confirmed', false);\n\n    if (error) {\n      console.error('一括承認に失敗しました:', error);\n    } else {\n      fetchShifts(); // シフトを再取得して表示を更新\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen h-full bg-gray-100\">\n      <Topbar />\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className=\"text-3xl font-bold mb-6\">シフト調整画面</h1>\n        <div className=\"flex mb-6\">\n          <div className=\"w-1/4 pr-4\">\n            <h2 className=\"text-xl font-semibold mb-4\">従業員一覧</h2>\n            <ul className=\"bg-white rounded-lg shadow\">\n              {employees.map((employee) => (\n                <li key={employee.id} className=\"p-3 border-b last:border-b-0\">\n                  {employee.last_name} {employee.first_name}\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"w-3/4\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h2 className=\"text-xl font-semibold\">カレンダー</h2>\n              <div>\n                <button\n                  onClick={handleBulkApprove}\n                  className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded mr-2\"\n                >\n                  <FaCheck className=\"inline-block mr-2\" />\n                  一括承認\n                </button>\n                <Link href=\"/shift-edit\" className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded\">\n                  <FaEdit className=\"inline-block mr-2\" />\n                  個別調整\n                </Link>\n              </div>\n            </div>\n            <div className=\"bg-white rounded-lg shadow p-4\">\n              {/* カレンダーコンポーネントをここに実装 */}\n              <div className=\"grid grid-cols-7 gap-2\">\n                {[...Array(7)].map((_, index) => (\n                  <div\n                    key={index}\n                    className=\"border p-2 h-32\"\n                    onDragOver={(e) => e.preventDefault()}\n                    onDrop={(e) => handleDrop(e, null, new Date(selectedDate.getTime() + index * 24 * 60 * 60 * 1000))}\n                  >\n                    {new Date(selectedDate.getTime() + index * 24 * 60 * 60 * 1000).toLocaleDateString()}\n                    {shifts\n                      .filter(\n                        (shift) =>\n                          new Date(shift.start_time).toDateString() ===\n                          new Date(selectedDate.getTime() + index * 24 * 60 * 60 * 1000).toDateString()\n                      )\n                      .map((shift) => (\n                        <div\n                          key={shift.id}\n                          draggable\n                          onDragStart={(e) => handleDragStart(e, shift.id)}\n                          className=\"bg-blue-100 p-1 my-1 rounded text-sm\"\n                        >\n                          {employees.find((emp) => emp.id === shift.employee_id)?.last_name}\n                        </div>\n                      ))}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ShiftAdjustmentPage;"
        }
      ]
    },
    {
      "component": "申請一覧（従業員名 休暇種類 期間） 詳細表示ボタン 承認ボタン 却下ボタン コメント入力欄",
      "accessRight": "ログインユーザー",
      "fileName": "leave-approval.tsx",
      "operatingProcedure": "1. 申請一覧から対象の休暇申請を選択\n2. 詳細表示ボタンをクリックして申請内容を確認\n3. 承認する場合は承認ボタンをクリック\n4. 却下する場合は却下ボタンをクリックし必要に応じてコメントを入力",
      "description": "従業員からの休暇申請を承認または却下するための画面",
      "id": "SCR-023",
      "screenName": "休暇承認画面",
      "category": "休暇管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": []
    },
    {
      "component": "従業員選択 日付選択 勤怠データ表示（出勤時間 退勤時間 休憩時間） 修正入力欄 修正理由入力欄 保存ボタン",
      "accessRight": "ログインユーザー",
      "fileName": "attendance-correction.tsx",
      "operatingProcedure": "1. 修正対象の従業員を選択\n2. 修正したい日付を選択\n3. 現在の勤怠データを確認\n4. 修正入力欄に正しい情報を入力\n5. 修正理由を入力\n6. 保存ボタンをクリックして修正を反映",
      "description": "従業員の勤怠データを修正するための画面",
      "id": "SCR-024",
      "screenName": "勤怠修正画面",
      "category": "勤怠データ管理",
      "user": "人事部門 管理職",
      "relatedBackendHandles": []
    }
  ]
}
